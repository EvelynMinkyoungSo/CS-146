class TreeNode(object):
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        while root:
            if root.val > p.val and root.val > q.val:
                root = root.left
            elif root.val < p.val and root.val < q.val:
                root = root.right
            else:
                return root
        return None

# Example Usage:
if __name__ == "__main__":
    # Construct the BST
    root = TreeNode(4)
    root.left = TreeNode(3)
    root.left.left = TreeNode(1)
    root.right = TreeNode(8)
    root.right.left = TreeNode(5)
    root.right.right = TreeNode(9)

    solution = Solution()

    p_val = int(input("Enter the value for node p: "))
    q_val = int(input("Enter the value for node q: "))

    # Find the LCA
    lca = solution.lowestCommonAncestor(root, TreeNode(p_val), TreeNode(q_val))
    print(f"LCA of {p_val} and {q_val}: {lca.val if lca else 'None'}")
