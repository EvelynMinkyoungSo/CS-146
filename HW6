//Java
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        // Sort the array to enable the use of two-pointer technique and simplify duplicate skipping.
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<>();
        
        // Iterate through each number in the array.
        for (int i = 0; i < nums.length; i++) {
            // Skip over duplicates for the current element.
            if (i > 0 && nums[i] == nums[i-1]) continue;

            // Initialize two pointers.
            int left = i + 1, right = nums.length - 1;

            // While the left pointer is to the left of the right pointer.
            while (left < right) {
                int sum = nums[i] + nums[left] + nums[right];
                
                // If the sum of the three numbers is less than zero, move the left pointer to the right.
                if (sum < 0) {
                    left++;
                // If the sum is greater than zero, move the right pointer to the left.
                } else if (sum > 0) {
                    right--;
                // If the sum is zero, we've found a valid triplet.
                } else {
                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));
                    // Skip duplicates for the left and right pointers.
                    while (left < right && nums[left] == nums[left + 1]) left++;
                    while (left < right && nums[right] == nums[right - 1]) right--;
                    // Move both pointers after finding a valid triplet.
                    left++;
                    right--;
                }
            }
        }
        return result;
    }
}
