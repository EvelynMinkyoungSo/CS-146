import java.util.*;

public class Solution {

    public static class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;


        TreeNode(int x) {
            val = x;
        }
    }

    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> levels = new ArrayList<>();
        if (root == null) return levels;

        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            List<Integer> level = new ArrayList<>();

            for (int i = 0; i < levelSize; i++) {
                TreeNode node = queue.remove();
                level.add(node.val);

                if (node.left != null) queue.add(node.left);
                if (node.right != null) queue.add(node.right);
            }

            levels.add(level);
        }

        return levels;
    }

    public static TreeNode buildTree(List<Integer> levelOrder) {
        if (levelOrder == null || levelOrder.isEmpty()) return null;

        Iterator<Integer> it = levelOrder.iterator();
        TreeNode root = new TreeNode(it.next());
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);

        while (it.hasNext()) {
            TreeNode current = queue.remove();
            Integer leftVal = it.hasNext() ? it.next() : null;
            Integer rightVal = it.hasNext() ? it.next() : null;

            if (leftVal != null) {
                current.left = new TreeNode(leftVal);
                queue.add(current.left);
            }
            if (rightVal != null) {
                current.right = new TreeNode(rightVal);
                queue.add(current.right);
            }
        }

        return root;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the level order representation of the tree (as a space-separated list):");
        String[] parts = scanner.nextLine().split("\\s+");
        List<Integer> levelOrder = new ArrayList<>();
        for (String part : parts) {
            if (!part.equals("null")) {
                levelOrder.add(Integer.parseInt(part));
            } else {
                levelOrder.add(null);
            }
        }

        TreeNode root = buildTree(levelOrder);
        Solution solution = new Solution();
        List<List<Integer>> levelOrderOutput = solution.levelOrder(root);
        System.out.println("Level Order Traversal: " + levelOrderOutput);
    }
}
