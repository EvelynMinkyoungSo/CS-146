class TreeNode:
  def __init__(self, val=0, left=None, right=None):
      self.val = val
      self.left = left
      self.right = right

def isBSTUtil(node, left_limit, right_limit):
  if not node:
      return True
  if node.val <= left_limit or node.val >= right_limit:
      return False
  return (isBSTUtil(node.left, left_limit, node.val) and
          isBSTUtil(node.right, node.val, right_limit))

def isValidBST(root):
  return isBSTUtil(root, float('-inf'), float('inf'))

def create_tree_from_input(values):
  if values[0] == 'null':
      return None

  nodes = [None if val == 'null' else TreeNode(int(val)) for val in values]
  kids = nodes[::-1]
  root = kids.pop()

  for node in nodes:
      if node:
          if kids: node.left = kids.pop()
          if kids: node.right = kids.pop()

  return root

if __name__ == '__main__':
  input_values = input("Enter the tree values level by level and use 'null' for no node:\n").split()
  tree_root = create_tree_from_input(input_values)
  print("Is the entered tree a valid BST?", isValidBST(tree_root))
