#Python
def threeSum(self, nums):
    # Use two pointer techniques and align the arrangement to simplify duplicate skipping
    nums.sort()
    result = []

    # Repeat each number in the array
    for i in range(len(nums)):
        # Skip over duplicates for the current element.
        if i > 0 and nums[i] == nums[i-1]:
            continue

        # Initialize the two pointers
        left, right = i + 1, len(nums) - 1

        # The left pointer is on the left side of the right pointer
        while left < right:
            total = nums[i] + nums[left] + nums[right]

            # If the sum of the three numbers is less than 0, move the left pointer to the right
            if total < 0:
                left += 1
            # If the sum is greater than 0, move the right pointer to the left
            elif total > 0:
                right -= 1
            # If the sum is 0, we've found a valid triplet
            else:
                result.append([nums[i], nums[left], nums[right]])
                # Skip duplicates for the left and right pointers
                while left < right and nums[left] == nums[left + 1]:
                    left += 1
                while left < right and nums[right] == nums[right - 1]:
                    right -= 1
                # Move both pointers after finding a valid triplet
                left += 1
                right -= 1

    return result
