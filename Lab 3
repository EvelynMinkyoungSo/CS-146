Problem 1:
1) 10000000000n^2 vs n^3
> Reasoning 
Infinite n , The (n^3) term grows faster than (10{10}n^2).
Answer: n^3

2) n^2 log(n) vs n(log(n))10
Reasoning >
n^2 log(n) grows faster than n(log(n))^10 
because the logarithmic function to the power of 10 grows slower than the quadratic term. 
Answer: n^2 log(n)

3) n^ log(n) vs 2 √ n
Reasoning >
The function n^2 log(n) grows faster than the 2 √ n, because the logarithmic term grows slower than the polynomial term, 
but multiplied by n, the function grows faster than the simple square root function.
Answer: n^ log(n)

4) 2^n vs 2^2n
Reasoning > 2^2n = (2^n)^2
Answer: 2^2n


Problem 2:
isPrime(n): 
  for(i = 2, i*i <= n; i++) {
    if(n % i == 0) {
      return false
    }
  return true
 
Best Case:
Base case happen when n is even and greater than 2. 
First check i = 2 immediately finds that n is divided by 2 and returns false.
O(1) 
This is because a certain amount of work is done before the function is terminated.

Worst Case:
Worst case happen when n is a prime or composite number smallest factor is greater then √n.
The loop has to continue when i exceed √n.
i * i <= n implie that i will keep go up to √n in worst case.
O(√n) 
This is because the number of iterations of the loop is proportional to the square root of n.

Average Case: 
O(√n) 
























 
