#Python Solution

class Solution:
    def longestPalindrome(self, s: str) -> int:
        # Create a dictionary to count the occurrences of each character
        char_count = {}
        for char in s:
            char_count[char] = char_count.get(char, 0) + 1

        length = 0
        center_added = False
        # Repeat for each character in the string
        for count in char_count.values():
            if count % 2 == 0:
                # If count is even, it can be fully used in the palindrome
                length += count
            else:
                # If count is odd, use count-1 characters to maintain symmetry
                # and add one to the center if not already done
                length += count - 1
                if not center_added:
                    length += 1  # Add one character to the center of the palindrome
                    center_added = True

        return length

# Main code to prompt user input
if __name__ == "__main__":
    sol = Solution()
    user_input = input("Enter a string: ")  # Prompt the user to enter a string
    result = sol.longestPalindrome(user_input)  # Calculate the longest palindrome
    # Print the result of the longestPalindrome
    print(f"The length of the longest palindrome that can be built is: {result}")
