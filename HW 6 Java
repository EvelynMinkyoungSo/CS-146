import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
 //Use two pointer techniques and align the arrangement to simplify duplicate skipping
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<>();
//Repeat each number in the array
        for (int i = 0; i < nums.length; i++) {
//Skip over duplicates for the current element
            if (i > 0 && nums[i] == nums[i-1]) continue;
//Initialize the two pointers
            int left = i + 1, right = nums.length - 1;
//The left pointer is on the left side of the right pointer
            while (left < right) {
                int sum = nums[i] + nums[left] + nums[right];
//If the sum of the three numbers is less than 0, move the left pointer to the right
                if (sum < 0) {
                    left++;
//If the sum is greater than 0, move the right pointer to the left
                } else if (sum > 0) {
                    right--;
//If the sum is 0, found a valid triplet
                } else {
                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));
//Skip duplicates for the left and right pointers
                    while (left < right && nums[left] == nums[left + 1]) left++;
                    while (left < right && nums[right] == nums[right - 1]) right--;
//Move both pointers after finding a valid triplet
                    left++;
                    right--;
                }
            }
        }
        return result;
    }
}
